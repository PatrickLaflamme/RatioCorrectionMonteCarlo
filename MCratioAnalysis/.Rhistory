test[1:3][[1]][1]
test[1:3][[1]][2]
test[1:3][[1]][1]
test[1:3][[1]][[1]]
test[[1]
]
test[[1]]
test[[[1]]]
test[[1]][1]
test <- c(list(1:5), list(6:10), list(11:15))
test[[1]]
test[[2]]
test[1:3]
test[1:3][1]
test[1:3][[1]]
test[2:3][[1]]
i=1
j=1
20*(i-1)*1:80 + (j-1)*1:80
20*(i-1)*1:80 + (j)*1:80
i=2
20*(i-1)*1:80 + (j)*1:80
20*(i-1)*(j)*1:80
20*(i-1)+(j)*1:80
80*(i-1)+(j)*1:80
1600*(i-1)+(j)*1:80
i=1
j=2
1600*(i-1)+(j)*1:80
1600*(i-1)+(j)*80+1:80
1600*(i-1)+(j-1)*80+1:80
j=1
1600*(i-1)+(j-1)*80+1:80
j=2
1600*(i-1)+(j-1)*80+1:80
load('../MCresults.RData')
dimnames(output)<- c('method','correlation','slopemean','effect variance','slopevariance')
dimnames(output)<- list('method','correlation','slopemean','effect variance','slopevariance')
dimnames(output)<- list(c('method','correlation','slopemean','effect variance','slopevariance'))
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),'correlation','slopemean','effect variance','slopevariance')
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste('correlation', seq(from=0.55, to=1.45, by=0.1), sep='-'), 'slopemean','effect variance','slopevariance')
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste('correlation', seq(from=0, to=.4, by=0.05), sep='-'), 'slopemean','effect variance','slopevariance')
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste('correlation', seq(from=0.05, to=.4, by=0.05), sep='-'), 'slopemean','effect variance','slopevariance')
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste('correlation', seq(from=0.0, to=.4, length.out=8), sep='-'), paste('slopemean',seq(from=0.55, to=1.45, by=0.1), sep='-'), 'effect variance','slopevariance')
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste('correlation', seq(from=0.0, to=.4, length.out=8), sep='-'), paste('slopemean',seq(from=0.55, to=1.45, by=0.1), sep='-'), paste('effect variance',seq(from=0, to=10, length.out=20), sep='-'),'slopevariance')
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste('correlation', seq(from=0.0, to=.4, length.out=8), sep='-'), paste('slopemean',seq(from=0.55, to=1.45, by=0.1), sep='-'), paste('effect variance',seq(from=0, to=10, length.out=20), sep='-'),paste('slopevariance', seq(from=0, to=1, length.out=20), sep='-'))
output['method-Index']
output['method-Index',,,,]
install.packages('R.matlab')
library(R.matlab)
writeMat('MCresults.mat', MCresults = output)
dimnames(output)[1]
sys.call('mkdir MCresultPlots')
effectvarRange <- seq(from=0, to=10, length.out = 20)
slopevarRange <- seq(from=0, to=1, length.out = 20)
ERtick <- c(0.005, 0.01,0.025,0.05,0.1,0.2,0.4,0.8)
for(i in dimnames(output)[1]){
sys.call(paste('mkdir MCresultPlots/', i, sep=''))
for(j in dimnames(output)[2]){
sys.call(paste('mkdir MCresultPlots/', i, '/', j, sep=''))
for(k in dimnames(output)[3]){
folder <- paste('MCresultPlots/', i, '/', j, '/', k,  sep='')
sys.call(paste('mkdir ', folder,  sep=''))
pdf(file=paste(k,'.pdf',sep=''), width = 10, height=10)
MCfilled.contour(x=effectvarRange,
y=slopevarRange,
z=log(output[i,j,k,,]),
contourz = output[i,j,k,,],
color.palette = MCrainbow,
nlevels = 100,
xlab = 'Effect Variance',
ylab = 'Slope Variance',
main = expression(paste(i,j,k,alpha,'= 0.05', sep=' ')),
key.axes = axis(4, at = log(ERtick), label = ERtick),
key.title = expression(paste('Actual ', alpha, sep = ''))
)
dev.off()
}
}
}
sys.call('mkdir MCresultPlots')
effectvarRange <- seq(from=0, to=10, length.out = 20)
slopevarRange <- seq(from=0, to=1, length.out = 20)
ERtick <- c(0.005, 0.01,0.025,0.05,0.1,0.2,0.4,0.8)
for(i in dimnames(output)[1]){
system(paste('mkdir MCresultPlots/', i, sep=''))
for(j in dimnames(output)[2]){
system(paste('mkdir MCresultPlots/', i, '/', j, sep=''))
for(k in dimnames(output)[3]){
folder <- paste('MCresultPlots/', i, '/', j, '/', k,  sep='')
system(paste('mkdir ', folder,  sep=''))
pdf(file=paste(k,'.pdf',sep=''), width = 10, height=10)
MCfilled.contour(x=effectvarRange,
y=slopevarRange,
z=log(output[i,j,k,,]),
contourz = output[i,j,k,,],
color.palette = MCrainbow,
nlevels = 100,
xlab = 'Effect Variance',
ylab = 'Slope Variance',
main = expression(paste(i,j,k,alpha,'= 0.05', sep=' ')),
key.axes = axis(4, at = log(ERtick), label = ERtick),
key.title = expression(paste('Actual ', alpha, sep = ''))
)
dev.off()
}
}
}
system(pwd)
system(ls)
system('pwd')
system('ls')
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
log(output[i,j,k,,])
log(unname(output[i,j,k,,]))
dim(log(unname(output[i,j,k,,])))
dimnames(output)[1]
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
warnings()
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
warnings()
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
source('~/Dropbox/MCratio/MCratioAnalysis/VisualizeAllData.R', echo=TRUE)
dimnames(output)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste('correlation', seq(from=0.0, to=.4, length.out=8), sep='-'), paste('slopemean',seq(from=0.55, to=1.45, by=0.1), sep='-'), paste('effect variance',seq(from=0, to=10, length.out=20), sep='-'),paste('slopevariance', seq(from=0, to=1, length.out=20), sep='-'))
newOutput <- output
dimnames(newOutput)<- list(c('method-Index', 'method-ZeroVar', 'method-Taylor'),paste(seq(from=0.0, to=.4, length.out=8)), paste(seq(from=0.55, to=1.45, by=0.1)), paste(seq(from=0, to=10, length.out=20)),paste(seq(from=0, to=1, length.out=20))
)
save(newOutput, file = 'MCresults-Labelled.RData')
library(PearsonDS)
hist(rpearsonIV(100000, m=3, nu=-3, location = 5, scale=1))
hist(rpearsonIV(100000, m=3, nu=-3, location = 5, scale=1), breaks = 100)
hist(rpearsonIV(100000, m=3, nu=-3, location = 5, scale=1), breaks = 1000)
hist(rpearsonIV(100000, m=3, nu=-3, location = 5, scale=1)-rpearsonIV(100000, m=3, nu=-3, location = 5, scale=1), breaks = 1000)
library(moments)
install.packages('moments')
library(moments)
skewness(rpearsonIV(100000, m=3, nu=-3, location = 5, scale=1))
skewness(rpearsonIV(100000, m=4, nu=-3, location = 5, scale=1))
skewness(rpearsonIV(100000, m=2, nu=-3, location = 5, scale=1))
skewness(rpearsonIV(100000, m=2, nu=0, location = 5, scale=1))
skewness(rpearsonIV(100000, m=1.1, nu=0, location = 5, scale=1))
skewness(rpearson(100000,moments=c(mean=1,variance=1,skewness=3,kurtosis=0)))
skewness(rpearson(100000,moments=c(mean=1,variance=1,skewness=3,kurtosis=3)))
skewness(rpearson(100000,moments=c(mean=1,variance=1,skewness=3,kurtosis=7)))
skewness(rpearson(100000,moments=c(mean=1,variance=1,skewness=3,kurtosis=8)))
skewness(rpearson(100000,moments=c(mean=1,variance=1,skewness=3,kurtosis=9)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=3,kurtosis=9)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=10,kurtosis=50)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
skewness(rpearson(1000000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
hist(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)), breaks=1000)
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=2,kurtosis=5)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=2,kurtosis=6)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=2,kurtosis=6)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=2,kurtosis=6)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=2,kurtosis=6)))
skewness(rpearson(100000,moments=c(mean=1,variance=2,skewness=1,kurtosis=5))-rpearson(100000,moments=c(mean=1,variance=2,skewness=2,kurtosis=6)))
which(newOutput<0.06 & newOutput>0.04)
which(newOutput<0.06 & newOutput>0.04, arr.ind = T)
test <- which(newOutput<0.055 & newOutput>0.045, arr.ind = T)
load("~/Dropbox/MCratio/MCresults.RData")
dimnames(output) <- dimnames(newOutput)
newOutput <- output
save(newOutput, file = 'MCresults-Labelled.RData')
dim(spacelist)
spacelist
skew(1)
apply(rnorm(100,100), 2, e1071::skewness)
apply(rnorm(100,100,1), 2, e1071::skewness)
apply(array(rnorm(10000), c(100,100)), 2, e1071::skewness)
apply(array(rnorm(100000), c(1000,100)), 2, e1071::skewness)
apply(array(rnorm(100000), c(1000,100)), 2, mean)
e1071::skewness(apply(array(rnorm(100000), c(1000,100)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(1000,100)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(1000,100)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(1000,100)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(1000,100)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(100,1000)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(100,1000)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(100,1000)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(100,1000)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(100,1000)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(100,1000)), 2, mean))
e1071::skewness(apply(array(rnorm(100000), c(100,1000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
e1071::skewness(apply(array(rnorm(1000000), c(100,10000)), 2, mean))
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R')
runTest(5, 0.9, 0.1, 1, 0.2, plot = T)
library(e1701)
library(e1071)
runTest(5, 0.9, 0.1, 1, 0.2, plot = T)
runTest(5, 0.9, 0.1, 1, 0.2, plot = T)
runTest(10, 0.9, 0.1, 1, 0.2, plot = T)
runTest(10, 0.9, 0.1, 1, 0.2, plot = T)
runTest(10, 0.9, 0.1, 1, 0.4, plot = T)
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
runTest(10, 0.9, 0.1, 1, 0.4, plot = T)
runTest(10, 0.9, 0.1, 1, 0.4)
runTest(8, 0.9, 0.1, 1, 0.4)
runTest(8, 0.9, 0.1, 1, 0.4)
runTest(8, 0.9, 0.1, 1, 0.4)
runTest(5, 0.9, 0.1, 1, 0.4)
runTest(5, 0.9, 0.1, 1, 0.4)
runTest(5, 0.9, 0.1, 1, 0.4)
runTest(5, 0.9, 0.1, 1, 0.4)
runTest(1, 0.9, 0.1, 1, 0.4)
runTest(1, 0.9, 0.1, 1, 0.4)
runTest(0, 0.9, 0.1, 1, 0.4)
runTest(-1, 0.9, 0.1, 1, 0.4)
runTest(9, 0.9, 0.1, 1, 0.4)
runTest(9, 0.9, 0.1, 1, 0.2)
runTest(9, 0.9, 0.1, 1, 0.2)
runTest(9, 0.9, 0.1, 1, 0.0)
runTest(9, 0.9, 0.1, 1, 0.0)
runTest(9, 0.9, 0.1, 1, 1)
runTest(9, 0.9, 0.1, 1, 0.9)
runTest(9, 0.9, 0.1, 1, -0.9)
runTest(9, 0.9, 10, 1, -0.9)
runTest(9, 0.9, 0.1, , -0.9)
runTest(9, 0.9, 0.1, 1, -0.9)
return(type1ER)
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
runTest(5, 0.9, 0.1, 1, -0.9)
runTest(5, 0.9, 0.1, 1, 0.4)
runTest(0, 0.9, 0.1, 1, 0.4)
runTest(9, 0.9, 0.1, 1, 0.4)
runTest(10, 0.9, 0.1, 1, 0.4)
runSkew(10, 0.9, 0.1, 1, 0.4)
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
runSkew(10, 0.9, 0.1, 1, 0.4)
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
runSkew(10, 0.9, 0.1, 1, 0.4)
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
runSkew(10, 0.9, 0.1, 1, 0.4)
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
runSkew(10, 0.9, 0.1, 1, 0.4)
val = runSkew(10, 0.9, 0.1, 1, 0.4, test=F)
hist(val[1])
hist(val[[1]])
hist(val[[2]])
hist(val[[3]])
hist(val[[2]])
hist(val[[3]])
par(mfrow=3)
par(mfrow=(3,1))
par(mfrow=c(3,1))
hist(val[[3]])
hist(val[[2]])
hist(val[[1]])
hist(val[[3]],xlim = c(-10,30))
hist(val[[2]],xlim = c(-10,30))
hist(val[[1]],xlim = c(-10,30))
dim(val[[1]])
hist(apply(val[[3]],2,mean),xlim = c(-10,30))
hist(apply(val[[2]],2,mean),xlim = c(-10,30))
hist(apply(val[[1]],2,mean),xlim = c(-10,30))
hist(apply(val[[3]],2,sd),xlim = c(-10,30))
hist(apply(val[[2]],2,sd),xlim = c(-10,30))
hist(apply(val[[1]],2,sd),xlim = c(-10,30))
mean(val[[1]])
mean(val[[2]])
mean(apply(val[[2]],2,sd))
mean(apply(val[[3]],2,sd))
median(apply(val[[2]],2,sd))
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
mean(apply(val[[2]],2,sd))
mean(apply(val[[3]],2,sd))
val <- runSkew(5,0.9, 0.2, 1, 0, test=f)
val <- runSkew(5,0.9, 0.2, 1, 0, test=F)
mean(apply(val[[2]],2,sd))
mean(apply(val[[3]],2,sd))
val <- runSkew(5,0.9, 0.2, 1, 0.4, test=F)
mean(apply(val[[2]],2,sd))
mean(apply(val[[3]],2,sd))
val <- runSkew(5,0.9, 0.2, 1, 0, test=F)
mean(apply(val[[2]],2,sd))
mean(apply(val[[3]],2,sd))
hist(apply(val[[2]],2,sd))
par(mfrow=c(2,1))
hist(apply(val[[2]],2,sd))
hist(apply(val[[3]],2,sd))
hist(apply(val[[2]],2,sd), xlim = c(0,10))
hist(apply(val[[3]],2,sd), xlim = c(0,10))
hist(apply(val[[2]],2,sd),breaks = seq(0,10,by = 0.1) xlim = c(0,10))
hist(apply(val[[2]],2,sd),breaks = seq(0,10,by = 0.1), xlim = c(0,10))
hist(apply(val[[3]],2,sd),breaks = seq(0,10,by = 0.1), xlim = c(0,10))
range(apply(val[[3]],2,sd))
hist(apply(val[[2]],2,sd),breaks = seq(0,15,by = 0.1), xlim = c(0,15))
hist(apply(val[[2]],2,sd),breaks = seq(0,15,by = 0.1), xlim = c(0,15))
hist(apply(val[[3]],2,sd),breaks = seq(0,15,by = 0.1), xlim = c(0,15))
val <- runSkew(5,0.9, 0.2, 1, 0.4, test=F)
hist(apply(val[[2]],2,sd),breaks = seq(0,15,by = 0.1), xlim = c(0,15))
hist(apply(val[[3]],2,sd),breaks = seq(0,15,by = 0.1), xlim = c(0,15))
val <- runSkew(5,0.9, 0.2, 1, 0.4, test=F)
hist(apply(val[[2]],2,var),breaks = seq(0,15,by = 0.1), xlim = c(0,15))
hist(apply(val[[3]],2,var),breaks = seq(0,15,by = 0.1), xlim = c(0,15))
range(apply(val[[3]],2,var))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100))
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100))
title(main = "Histogram E=5, S=0.9, varE=1, varS=0.2, r=0.4")
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar: Histogram E=5, S=0.9, varE=1, varS=0.2, r=0.4")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor: Histogram E=5, S=0.9, varE=1, varS=0.2, r=0.4")
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
Title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4")
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4")
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=0.1)
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=c(0, 0.25, 0.5, 0.75))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=c(0, 0.5, 0.5, 0.75))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=c(0, 0, 0, 2))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100), main = "ZeroVar")
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor")
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
val <- runSkew(5,0.9, 0.2, 1, 0, test=F)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
val <- runSkew(5,0.9, 0.2, 1, 0.4, test=F)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,100,by = 0.1), xlim = c(0,100),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
val <- runSkew(5,0.9, 0.2, 1, 0, test=F)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
val <- runSkew(5,0.9, 0.2, 1, 0.4, test=F)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
val <- runSkew(5,0.9, 0.2, 1, 0, test=F)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0",outer=T)
val <- runSkew(5,0.9, 0.2, 1, 0.4, test=F)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
test0 <- runtest(5,0.9, 0.2, 1, 0)
test0 <- runTest(5,0.9, 0.2, 1, 0)
test0
test0.4 <- runTest(5,0.9, 0.2, 1, 0.4)
test0.4
test0 <- runTest(10,0.9, 0.2, 1, 0)
test0
test0.4 <- runTest(10,0.9, 0.2, 1, 0.4)
test0.4
test0.4 <- runTest(10,0.9, 0.4, 1, 0.4)
test0.4
test0.4 <- runTest(10,0.9, 0.4, 2, 0.4)
test0.4
test0.4 <- runTest(10,0.9, 0.4, 2, 0)
test0.4
test0.4 <- runTest(6,0.9, 0.4, 2, 0.4)
test0.4 <- runTest(6,0.9, 0.4, 2, 0.4,sample_size = 100, n_samples = 100)
test0.4
test0.4 <- runTest(6,0.9, 0.4, 2, 0.4,sample_size = 100, n_samples = 1000)
test0.4
test0.4 <- runTest(6,0.9, 0.4, 2, 0.4,sample_size = 50, n_samples = 1000)
test0.4
val0 <- runSkew(5,0.9, 0.2, 1, 0, test=F)
test0 <- runTest(5,0.9, 0.2, 1, 0)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0",outer=T)
val0.4 <- runSkew(5,0.9, 0.2, 1, 0.4, test=F)
test0.4 <- runTest(5,0.9, 0.2, 1, 0.4)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val[[2]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val[[3]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val0.4[[2]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val0.4[[3]],2,var),breaks = seq(0,200,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val0.4[[2]],2,var),breaks = seq(0,1000,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val0.4[[3]],2,var),breaks = seq(0,1000,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0.4",outer=T)
par(mfrow=c(2,1), oma=c(0, 0, 2, 0))
hist(apply(val0[[2]],2,var),breaks = seq(0,1000,by = 0.1), xlim = c(0,50),main = "ZeroVar", xlab = 'Variance')
hist(apply(val0[[3]],2,var),breaks = seq(0,1000,by = 0.1), xlim = c(0,50),main = "Taylor", xlab = 'Variance')
title(main = "Histograms: E=5, S=0.9, varE=1, varS=0.2, r=0",outer=T)
dist
test <- Datagen(100,20,2, c(5,1), matrix(c(1,0,1,0), ncol=2), 10100 )
test <- Datagen(100,20,2, c(5,1), diag(x=1, nrow=2), 10100 )
test <- Datagen(100,20,2, c(5,1), matrix(c(1,0,0,1), ncol=2), 10100 )
test
genIndex(test, 4)
genIndex(test, 4)
source('~/Dropbox/MCratio/MCratioAnalysis/Monte Carlo Basic Functions.R', echo=TRUE)
genIndex(test, 4)
testIndex <- genIndex(test, 4)
hist(testIndex)
test <- Datagen(100,20,2, c(5,1), matrix(c(1,0,0,1), ncol=2), 1231242 )
test1Index <- genIndex(test, 4)
test2 <- Datagen(100,20,2, c(5,1), matrix(c(1,0,0,1), ncol=2), 1123124 )
test2Index <- genIndex(test2, 4)
t.test(test2Index, test1Index, paired = T)
result <- c()
for(i in 1:100){}
for(i in 1:100){
result <- c(result, t.test(test2Index[,i], test1Index[,i], paired = T)$p.value)
}
result
test2 <- Datagen(100,20,2, c(5,1), matrix(c(1,0,0,.1), ncol=2), 1123124 )
test <- Datagen(100,20,2, c(5,1), matrix(c(1,0,0,.1), ncol=2), 1231242 )
test1Index <- genIndex(test, 4)
test2Index <- genIndex(test2, 4)
for(i in 1:100){
result <- c(result, t.test(test2Index[,i], test1Index[,i], paired = T)$p.value)
}
result
result <- c()
for(i in 1:100){
result <- c(result, t.test(test2Index[,i], test1Index[,i], paired = T)$p.value)
}
test2 <- Datagen(100,20,2, c(6,1), matrix(c(1,0,0,.1), ncol=2), 1123124 )
test2Index <- genIndex(test2, 4)
result <- c()
for(i in 1:100){
result <- c(result, t.test(test2Index[,i], test1Index[,i], paired = T)$p.value)
}
result
t.test(test2Index[,i], test1Index[,i], paired = T)$p.value
t.test(test2Index[,i], test1Index[,i], paired = T)
test2 <- Datagen(100,20,2, c(6,1), matrix(c(1,0,0,.1), ncol=2),)
test2 <- Datagen(100,20,2, c(6,1), matrix(c(1,0,0,.1), ncol=2),0)
test <- Datagen(100,20,2, c(5,1), matrix(c(1,0,0,.1), ncol=2), 1231242 )
test2==test
any(test2==test)
test2Index <- genIndex(test2, 4)
test1Index <- genIndex(test, 4)
t.test(test2Index[,i], test1Index[,i], paired = T)$p.value
test2 <- Datagen(100,20,2, c(6,1), matrix(c(1,.5,.5,.1), ncol=2),0)
test2 <- Datagen(100,20,2, c(6,1), matrix(c(1,0.4*0.01,0.4*0.01,.1), ncol=2),0)
test2Index <- genIndex(test2, 4)
test1 <- Datagen(100,20,2, c(5,1), matrix(c(1,0.4*0.01,0.4*0.01,.1), ncol=2),0)
test1Index <- genIndex(test1, 4)
t.test(test2Index[,i], test1Index[,i], paired = T)$p.value
test2Index[,i
]
test1Index[,i]
test1 <- Datagen(100,20,2, c(2,1), matrix(c(1,0.4*0.01,0.4*0.01,.1), ncol=2),0)
test1Index <- genIndex(test1, 4)
t.test(test2Index[,i], test1Index[,i], paired = T)$p.value
t.test(test2Index, test1Index, paired = T)$p.value
test1 <- Datagen(100,20,2, c(10,1), matrix(c(1,0.4*0.01,0.4*0.01,.1), ncol=2),0)
test1Index <- genIndex(test1, 4)
t.test(test2Index[,i], test1Index[,i], paired = T)$p.value
test1 <- Datagen(100,20,2, c(15,1), matrix(c(1,0.4*0.01,0.4*0.01,.1), ncol=2),0)
test1Index <- genIndex(test1, 4)
test2 <- Datagen(100,20,2, c(1,1), matrix(c(1,0.4*0.01,0.4*0.01,.1), ncol=2),0)
test2Index <- genIndex(test2, 4)
t.test(test2Index[,i], test1Index[,i], paired = T)$p.value
hist(test2Index)
hist(test1Index)
